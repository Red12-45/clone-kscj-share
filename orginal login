const express = require("express");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const session = require("express-session");
const passport = require("passport");

const passportLocalMongoose = require("passport-local-mongoose");

const findOrCreate = require("mongoose-findorcreate");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const app = express();

app.use(passport.initialize());
app.use(passport.session());

// Modify the passport configuration to include Google OAuth 2.0
passport.use(
  new GoogleStrategy(
    {
      clientID:
        "948110257988-n4p8vdirtjp2aogegkpfctr8vohcsre7.apps.googleusercontent.com",
      clientSecret: "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",
      callbackURL:
        // "http://localhost:3000/auth/google/secrets" ||
        "https://kscj-anonymous.herokuapp.com/auth/google/secrets",
    },
    function (accessToken, refreshToken, profile, cb) {
      User.findOrCreate({ googleId: profile.id }, function (err, user) {
        return cb(err, user);
      });
    }
  )
);

// Add a new route for initiating Google OAuth 2.0 authentication
app.get(
  "/auth/google",
  passport.authenticate("google", { scope: ["profile"] })
);

// Add a callback route for handling Google OAuth 2.0 authentication response
app.get(
  "/auth/google/secrets",
  passport.authenticate("google", { failureRedirect: "/" }),
  function (req, res) {
    // Successful authentication, redirect to secrets page.
    res.redirect("/secrets");
  }
);

app.set("view engine", "ejs");

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("public"));

app.use(
  session({
    secret: "Thisismydefaultsecret",
    resave: false,
    saveUninitialized: true,
  })
);

mongoose.connect(
  "mongodb+srv://Bangthai:428jesqb9t@cluster0.dkzah.mongodb.net/userDB",
  { useNewUrlParser: true, useUnifiedTopology: true }
);

mongoose.set("useCreateIndex", true);
const userSchema = new mongoose.Schema({
  email: String,
  password: String,
  googleId: String,
  secret: String,
  createdAt: { type: Date, default: Date.now },
});
userSchema.plugin(passportLocalMongoose); // used to hash and salt password and to
//save to save our users into our mongo database.
// const secret = process.env.SECRET;
// userSchema.plugin(encrypt, {secret:secret, encryptedFields:["password"]});

userSchema.plugin(findOrCreate);

const User = new mongoose.model("User", userSchema);
passport.use(User.createStrategy()); //This part is handled by the passport-local-mongoose
//for serialising and deserialzing
// passport.serializeUser(User.serializeUser());
// passport.deserializeUser(User.deserializeUser());

passport.serializeUser(function (user, done) {
  done(null, user.id);
});

passport.deserializeUser(function (id, done) {
  User.findById(id, function (err, user) {
    done(err, user);
  });
});

app.get("/", function (req, res) {
  res.render("login");
});

app.get("/logout", function (req, res) {
  req.logout();
  res.redirect("/");
});

app.get(
  "/auth/google",
  passport.authenticate("google", {
    scope: ["profile", "email"],
  })
);
app.get(
  "/auth/google/secrets",
  passport.authenticate("google", { failureRedirect: "/login" }),
  function (req, res) {
    // Successful authentication, redirect home.
    res.redirect("/secrets");
  }
);

app.get("/secrets", function (req, res) {
  User.find({ secret: { $ne: null } }, function (err, foundData) {
    if (err) {
      console.log(err);
    } else {
      if (foundData) {
        res.render("home", { userWithSecret: foundData });
      }
    }
  });
});

app.get("/submit", function (req, res) {
  if (req.isAuthenticated()) {
    res.render("submit");
  } else {
    res.redirect("/login");
  }
});

app.post("/submit", function (req, res) {
  const submittedSecret = req.body.secret;
  User.findById(req.user.id, function (err, foundUser) {
    if (err) {
      console.log(err);
    } else {
      if (foundUser) {
        foundUser.secret = submittedSecret;
        foundUser.save(function () {
          res.redirect("/secrets");
        });
      }
    }
  });
});

app.get("/register", function (req, res) {
  res.render("register");
});

app.post("/register", function (req, res) {
  User.register(
    { username: req.body.username },
    req.body.password,
    function (err, user) {
      if (err) {
        console.log(err);
        res.redirect("/register");
      } else {
        passport.authenticate("local")(req, res, function () {
          res.redirect("/secrets");
        });
      }
    }
  );
});

app.post("/login", function (req, res) {
  const user = new User({
    username: req.body.username,
    password: req.body.password,
  });

  req.login(user, function (err) {
    if (err) {
      console.log(err);
    } else {
      passport.authenticate("local")(req, res, function () {
        res.redirect("/secrets");
      });
    }
  });
});

app.listen(process.env.PORT || 3000, () => {
  console.log("Server started on port 3000");
});
